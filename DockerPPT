---
marp: true
theme: gaia
class: invert
---

<style>
img[alt~="center"] {
  display: block;
  margin: 0 auto;
}
</style>

# Docker & k8s : 컨테이너 기술에 대한 설명과 등장 배경

_ICT기획부 선임 임형우_

---

## 자신의 앱을 배포하려는 개발자 L씨...

1. 미묘하게 다른 개발 환경으로 인한 버그 발생 - 'it works on my machine'
2. while (**install - 확인 - 확인 - 수락 - ...**)
3. 가상 머신의 한계 (e.g. 속도, 비용, etc...)
4. 각 OS에서 테스트 - 서로 다른 의존성들
5. 장비 값 부담

#### 위의 문제를 어떻게 해결하면 좋을까요?

---

## 컨테이너

![w:700 center](./vm_container.png)

---

![w:650 center](./docker.png)

---

## 도커 아키텍처

![h:500 center](./d_architecture.svg)

---

## Docker Objects

- 이미지
- 컨테이너
- 볼륨
- 네트워크

---

## 이미지

![h:400 center](./docker_img.png)

- **read-only**, **레이어 구조**, **쉬운 공유**, **빌드에 사용됨**, **스냅 샷**

---

## 컨테이너

![h:400 center](./docker_container.png)

- **namespaces**, **cgroup**

---

## Recap : 도커 아키텍처

`$ docker run -i -t ubuntu /bin/bash`

## ![h:400 center](./d_architecture.svg)

---

## 또 다른 문제에 봉착한 개발자 L씨...

- 로드 밸런싱
- 컨테이너 관리 자동화
- Scale Out의 어려움
- ㅠㅠ

---

## 컨테이너 오케스트레이션

`컨테이너화 된 애플리케이션에 대한 자동화된 설정, 관리 및 제어 체계`

1. 배포 관리
2. 제어 및 모니터링
3. 스케일링
4. 네트워킹

---

![w:500 center](./k8s.png)

---

## 쿠버네티스 핵심 설계 사상

1. 선언적 구성 기반의 배포 환경
2. 기능 단위의 분산
3. 클러스터 단위 중앙 제어
4. 동적 그룹화
5. API 기반 상호작용

---

## 선언적 구성 기반의 배포 환경

![w:1100 center](./declarative.jpg)

---

## 기능 단위의 분산

![w:900 center](./kube-controller.png)

---

## 클러스터 단위 중앙 제어

![w:700 center](./cluster.png)

---

## 동적 그룹화

![w:900 center](./labels.png)

---

## API 기반 상호작용

![w:600 center](./apiserver.png)

---

# EOF

- https://docs.docker.com/
- https://kubernetes.io/ko/docs/concepts/
- https://seongjin.me/kubernetes-core-concepts/
- https://m.blog.naver.com/shakey7/221600166205
